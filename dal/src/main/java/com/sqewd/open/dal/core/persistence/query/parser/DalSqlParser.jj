/**
 * Copyright 2012 Subho Ghosh (subho dot ghosh at outlook dot com)
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
options{
    IGNORE_CASE=true ;
    STATIC=false;
//  DEBUG_LOOKAHEAD= true ;
}

PARSER_BEGIN(DalSqlParser)

package com.sqewd.open.dal.core.persistence.query.parser;

import java.io.*;
import java.util.*;
import org.gibello.zql.*;

@SuppressWarnings({  "unused","serial"})
public class DalSqlParser {

  public static void main(String args[]) throws ParseException {

    DalSqlParser p = null ;

    if ( args.length < 1  ) {
      System.out.println("Reading from stdin (exit; to finish)");
      p = new DalSqlParser(System.in) ;

    } else {

      try {
        p = new DalSqlParser(new DataInputStream(
                          new FileInputStream(args[0]))) ;
      } catch (FileNotFoundException e) {
        System.out.println("File " + args[0] +
                           " not found. Reading from stdin") ;
        p = new DalSqlParser(System.in) ;
      }
    } // else ends here

    if ( args.length > 0 ) {
      System.out.println(args[0]) ;
    }

    ZQuery st = null;
    while((st = p.QueryClause()) != null) {
      System.out.println(st.toString());
    }

    System.out.println("Parse Successful") ;

  } // main ends here

} // class DalSqlParser ends here

PARSER_END(DalSqlParser)


SKIP:
{
    " "
|   "\t"
|   "\r"
|   "\n"
}

/* Prefix      Meaning
    -------------------
    K_          Keyword
    S_          Substitutes
*/

TOKEN: /* SQL Keywords. prefixed with K_ to avoid name clashes */
{
    <K_ALL: "ALL">
|   <K_AND: ";">
|  < K_QAND: "AND" >
|   <K_ANY: "ANY">
|   <K_AS: "AS">
|   <K_ASC:"ASC">
|   <K_AVG:"AVG">
|   <K_BETWEEN:"BETWEEN">
|   <K_BINARY_INTEGER: "BINARY_INTEGER">
|   <K_BOOLEAN:"BOOLEAN">
|   <K_BY:"BY">
|   <K_CHAR:"CHAR">
|   <K_COMMENT:"COMMENT">
|   <K_COMMIT:"COMMIT">
|   <K_CONNECT:"CONNECT">
|   <K_COUNT:"COUNT">
|   <K_DATE:"DATE">
|   <K_DELETE:"DELETE">
|   <K_DESC:"DESC">
|   <K_DISTINCT:"DISTINCT">
|   <K_EXCLUSIVE:"EXCLUSIVE">
|   <K_EXISTS:"EXISTS">
|   <K_EXIT:"EXIT">
|   <K_FLOAT:"FLOAT">
|   <K_FOR:"FOR">
|   <K_FROM:"FROM">
|   <K_GROUP:"GROUP">
|   <K_HAVING:"HAVING">
|   <K_IN:"IN">
|   <K_INSERT:"INSERT">
|   <K_INTEGER:"INTEGER">
|   <K_INTERSECT:"INTERSECT">
|   <K_INTO:"INTO">
|   <K_IS:"IS">
|   <K_LIKE:"LIKE">
|   <K_LOCK:"LOCK">
|   <K_MAX:"MAX">
|   <K_MIN:"MIN">
|   <K_MINUS:"MINUS">
|   <K_MODE:"MODE">
|   <K_NATURAL:"NATURAL">
|   <K_NOT:"NOT">
|   <K_NOWAIT:"NOWAIT">
|   <K_NULL:"NULL">
|   <K_NUMBER:"NUMBER">
|   <K_OF:"OF">
|   <K_ONLY:"ONLY">
|   <K_OR:"|">
|   <K_QOR:"OR">
|   <K_ORDER:"ORDER">
|   <K_PRIOR:"PRIOR">
|   <K_QUIT:"QUIT">
|   <K_READ:"READ">
|   <K_REAL:"REAL">
|   <K_ROLLBACK:"ROLLBACK">
|   <K_ROW:"ROW">
|   <K_SELECT:"SELECT">
|   <K_SET:"SET">
|   <K_SHARE:"SHARE">
|   <K_SMALLINT:"SMALLINT">
|   <K_START:"START">
|   <K_SUM:"SUM">
|   <K_TABLE:"TABLE">
|   <K_TRANSACTION:"TRANSACTION">
|   <K_UNION:"UNION">
|   <K_UPDATE:"UPDATE">
|   <K_VALUES:"VALUES">
|   <K_VARCHAR2:"VARCHAR2">
|   <K_VARCHAR:"VARCHAR">
|   <K_WHERE:"WHERE">
|   <K_WITH:"WITH">
|   <K_WORK:"WORK">
|   <K_WRITE:"WRITE">
}

TOKEN : /* Numeric Constants */
{
	< S_NUMBER: <FLOAT>
	    | <FLOAT> ( ["e","E"] ([ "-","+"])? <FLOAT> )?
    	>
  | 	< #FLOAT: <INTEGER>
	    | <INTEGER> ( "." <INTEGER> )?
	    | "." <INTEGER>
    	>
  | 	< #INTEGER: ( <DIGIT> )+ >
  | 	< #DIGIT: ["0" - "9"] >
}

SPECIAL_TOKEN:
{
   <LINE_COMMENT: "--"(~["\r","\n"])*>
|  <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}


TOKEN:
{
	< #S_VARNAME: ( <LETTER> )+ ( <DIGIT> | <LETTER> |<SPECIAL_CHARS>)* >
|   < S_IDENTIFIER: <S_VARNAME> ("." <S_VARNAME>)* >
| 	< #LETTER: ["a"-"z", "A"-"Z"] >
|   < #SPECIAL_CHARS: "$" | "_">
|   < S_BIND: ":" <S_IDENTIFIER> ("." <S_IDENTIFIER>)? >
|   < S_CHAR_LITERAL: "'" (~["'"])* "'" ("'" (~["'"])* "'")*>
|   < S_QUOTED_IDENTIFIER: "\"" (~["\n","\r","\""])* "\"" >
}


void BasicDataTypeDeclaration():
{}
{
    (       "CHAR"
        |   "VARCHAR"
        |   "VARCHAR2"
        |   "INTEGER"
        |   "NUMBER"
        |   "NATURAL"
        |   "REAL"
        |   "FLOAT"
    ) [ "(" <S_NUMBER> [ "," <S_NUMBER> ] ")" ]

    |   "DATE"
    |   "BINARY_INTEGER"
    |   "BOOLEAN"
}


/* ---------------- DECLARATIONS SECTION ends here ------------------ */

/* ---------------- Code Section starts here ---------------------- */
                                
ZQuery QueryClause():
{
  ZQuery q;
  Vector<ZOrderBy> v;
}
{
  q = SelectWithoutOrder()
  [ v = OrderByClause() { q.addOrderBy(v); } ]
  { return q; }

}

ZQuery SelectWithoutOrder():
{
  ZQuery q = new ZQuery();
  ZExp where = null;
  ZGroupBy groupby = null;
  ZExpression setclause = null;
}
{
  [ where = WhereClause() ]
  {
    q.addWhere(where);
    
    return q;
  }
}

ZExp WhereClause():
{
  ZExp e;
}
{
    e = SQLExpression() { return e; }
}

ZExp SQLExpression():
{
  ZExp e1, e2;
  ZExpression e = null;
  boolean single = true;
}
{
    e1 = SQLAndExpression()
    ((< K_OR > | < K_QOR >) e2 = SQLAndExpression() {
      if(single) { e = new ZExpression("OR", e1); }
      single=false;
      e.addOperand(e2);
    } )*
    { return (single ? e1 : e); }
}

String Relop():
{
  Token op;
}
{
   op = "="  { return op.toString(); }
 | op = "!=" { return op.toString(); }
 | op = "#"  { return op.toString(); }
 | op = "<>" { return op.toString(); }
 | op = ">"  { return op.toString(); }
 | op = ">=" { return op.toString(); }
 | op = "<"  { return op.toString(); }
 | op = "<=" { return op.toString(); }
}

ZExp SQLAndExpression():
{
  ZExp e1, e2;
  ZExpression e = null;
  boolean single = true;
}
{
    e1 = SQLUnaryLogicalExpression()
    ( (< K_QAND > | < K_AND >)      e2 = SQLUnaryLogicalExpression()      {
      if(single) { e = new ZExpression("AND", e1); }
      single=false;
      e.addOperand(e2);
    }   )*
    { return (single ? e1 : e); }
}

ZExp SQLUnaryLogicalExpression():
{
  ZExp e1, e;
  boolean not = false;
}
{
   ( ["NOT" { not = true; } ]
     e1 = SQLRelationalExpression() {
       if(not) e = new ZExpression("NOT", e1);
       else e = e1;
       return e;
     }
    )
}


// SQLRelationalExpression ::=
//    ( [PRIOR] SQLSimpleExpression | SQLExpressionList )
//    ( SQLRelationalOperatorExpression
//      | SQLInClause | SQLBetweenClause | SQLLikeClause | IsNullClause )?
ZExp SQLRelationalExpression():
{
  ZExp e1, eleft;
  ZExpression eright = null;
  Vector<ZExp> v;
  boolean prior = false;
}
{
    /* Only after looking past "(", Expression() and "," we will know that
       it is expression list */

  (LOOKAHEAD("(" SQLSimpleExpression() ",")           //)
     "(" v = SQLExpressionList() ")" {
       eleft = new ZExpression(",");
       ((ZExpression)eleft).setOperands(v);
     }
    |
    ( ["PRIOR" { prior = true; } ]
      e1 = SQLSimpleExpression() {
        if(prior) eleft = new ZExpression("PRIOR", e1);
        else eleft = e1;
      } )
  ) //Closes parenthese opened before LOOKAHEAD

    /* Lookahead(2) is required because of NOT IN,NOT BETWEEN and NOT LIKE */
   ( eright = SQLRelationalOperatorExpression()
    |  LOOKAHEAD(2) (eright = SQLInClause())
    |  LOOKAHEAD(2) (eright = SQLBetweenClause())
    |  LOOKAHEAD(2) (eright = SQLLikeClause())
    |  eright = IsNullClause()
   )?

   {
     if(eright == null) return eleft;
     Vector<ZExp> v2 = eright.getOperands();
     if(v2 == null) v2 = new Vector<ZExp>(); //For IS NULL, which is unary!
     v2.insertElementAt(eleft, 0);
     eright.setOperands(v2);
     return eright;
   }
}

Vector<ZExp> SQLExpressionList():
{
  Vector<ZExp> v = new Vector<ZExp>(8);
  ZExp e;
}
{
    e = SQLSimpleExpressionOrPreparedCol() { v.addElement(e); }
    ("," e = SQLSimpleExpressionOrPreparedCol() { v.addElement(e); } )*
    { return v; }
}

ZExpression SQLRelationalOperatorExpression():
{
  ZExpression e;
  ZExp e1, eright;
  String op;
  String unaryOp = null;
}
{

    op = Relop() { e = new ZExpression(op); }

    /* Only after seeing an ANY/ALL or "(" followed by a SubQuery() we can
    determine that is is a sub-query
    */
    (
       ["PRIOR" { unaryOp = "PRIOR"; } ] e1 = SQLSimpleExpressionOrPreparedCol() {
          if(unaryOp == null) eright = e1;
          else eright = new ZExpression(unaryOp, e1);
        }
    )

    { e.addOperand(eright); return e; }
}
ZExp SQLSimpleExpressionOrPreparedCol():
{
  ZExp e;
}
{
   e = SQLSimpleExpression() { return e; }
 | e = PreparedCol() { return e; } // For prepared columns ("?")
}

// For prepared columns ("?")
ZExp PreparedCol(): {}
{
  "?" { return new ZExpression("?"); } // For prepared columns ("?")
}

ZExpression SQLInClause():
{
  ZExpression e;
  boolean not = false;
  Vector<ZExp> v;
}
{
  ["NOT" { not = true; }]
  "IN" { e = new ZExpression(not ? "NOT IN" : "IN"); }
  "(" (v = SQLExpressionList() { e.setOperands(v); }) ")"
  { return e; }
}

ZExpression SQLBetweenClause():
{
  ZExpression e;
  ZExp  e1, e2;
  boolean not = false;
}
{
  ["NOT" { not = true; }]
  "BETWEEN" e1 = SQLSimpleExpressionOrPreparedCol() ";" e2 = SQLSimpleExpressionOrPreparedCol() {
    if(not) e = new ZExpression("NOT BETWEEN", e1, e2);
    else e = new ZExpression("BETWEEN", e1, e2);
    return e;
  }
}

Vector<ZOrderBy> OrderByClause():
{
  Vector<ZOrderBy> v = new Vector<ZOrderBy>();
  ZExp e;
  ZOrderBy ob;
}
{
    "ORDER" "BY" e = SQLSimpleExpression() { ob = new ZOrderBy(e); }
    ["ASC" | "DESC" { ob.setAscOrder(false); }] { v.addElement(ob); }
    ("," e = SQLSimpleExpression() { ob = new ZOrderBy(e); }
     ["ASC" | "DESC" { ob.setAscOrder(false); }] { v.addElement(ob); } )*
    { return v; }
}

ZExpression SQLLikeClause():
{
  ZExp eright;
  ZExpression e;
  boolean not = false;
}
{
  ["NOT" { not = true; }]
  "LIKE" eright = SQLSimpleExpressionOrPreparedCol() {
    if(not) e = new ZExpression("NOT LIKE", eright);
    else e = new ZExpression("LIKE", eright);
    return e;
  }
}

ZExpression IsNullClause():
{
  boolean not = false;
}
{
  "IS" ["NOT" { not = true; }] "NULL" {
    return(not ? new ZExpression("IS NOT NULL") : new ZExpression("IS NULL"));
  }
}


// SQLSimpleExpression
//    ::= SQLMultiplicativeExpression (OP SQLMultiplicativeExpression)*
// OP ::= + | - | "||"
ZExp SQLSimpleExpression():
{
  Token op;
  ZExp e1, e2;
  ZExpression e = null;
}
{
    e1 = SQLMultiplicativeExpression()
    ( ( op = "+" |  op = "-" |  op = "||") e2 = SQLMultiplicativeExpression() {
      e = new ZExpression(op.toString(), e1);
      e.addOperand(e2);
      e1 = e;
    } )*
    { return e1; }
}


// SQLMultiplicativeExpression
//    ::= SQLExpotentExpression (OP SQLExpotentExpression)*
// OP ::= * | /
ZExp SQLMultiplicativeExpression():
{
  Token op;
  ZExp e1, e2;
  ZExpression e = null;
}
{
    e1 = SQLExpotentExpression()
    ( (op = "*" | op = "/") e2 = SQLExpotentExpression() {
      e = new ZExpression(op.toString(), e1);
      e.addOperand(e2); 
      e1 = e;
    } )*
    { return e1; }
}

// SQLExpotentExpression ::= SQLUnaryExpression (** SQLUnaryExpression)*
ZExp SQLExpotentExpression():
{
  Token op;
  ZExp e1, e2;
  ZExpression e = null;
  boolean single = true;
}
{
    e1 = SQLUnaryExpression()
    ( op = "**" e2 = SQLUnaryExpression() {
      if(single) e = new ZExpression(op.toString(), e1);
      single = false;
      e.addOperand(e2);
    } )*
    { return (single ? e1 : e); }
}

// SQLUnaryExpression ::= [+|-] SQLPrimaryExpression
ZExp SQLUnaryExpression():
{
  Token op = null;
  ZExp e1, e;
}
{
  [ op = "+" |  op = "-"] e1 = SQLPrimaryExpression() { 
    if(op == null) e = e1;
    else e = new ZExpression(op.toString(), e1);
    return e;
  }
}
String OracleObjectName():
{
  Token t;
}
{
    t = <S_IDENTIFIER> { return t.toString(); } | t = <S_QUOTED_IDENTIFIER> { return t.toString(); }
}

String TableColumn():
{
  StringBuffer buf = new StringBuffer();
  String s;
}
{
    // user.table.column
    s = OracleObjectName() { buf.append(s); }
    [ "." s = OracleObjectName() { buf.append("." + s); }
     ["." s = OracleObjectName() { buf.append("." + s); } ]]
    { return buf.toString(); }
}

// 01/07/00 PY.Gibello - Added COUNT(*) to SQLPrimaryExpression
// TBD should be ZConstant("COUNT(*)", ZConstant.STRING))
// instead of ZConstant("*", ZConstant.COLUMNNAME) ??
// 01/06/02 PY.Gibello - Added ALL | DISTINCT (then the column name
// starts with "all " or "distinct " when required, which may not be the
// fairest solution...)

// SQLPrimaryExpression ::= NULL | OuterJoinExpression
//   | AggregateFunc ( [ ALL | DISTINCT ] TableColumn ) | TableColumn
//   | COUNT(*)
//   | <NUMBER> | <STRING> | <BIND>
ZExp SQLPrimaryExpression():
{
  Token t;
  String s, s2, modifier="";
  ZExp e;
}
{
  "NULL" { return new ZConstant("NULL", ZConstant.NULL); }
	{
     return new ZConstant(s, ZConstant.COLUMNNAME);
     //return new ZExpression("_NOT_SUPPORTED"); //TBD
   }
|  LOOKAHEAD(3) "COUNT" "(" "*" ")" {
     return new ZExpression("COUNT",
      new ZConstant("*", ZConstant.COLUMNNAME));
   }
|  LOOKAHEAD(3) s = AggregateFunc() "("
    ("ALL" { modifier="all "; } | "DISTINCT" { modifier="distinct "; })
    s2 = TableColumn() ")"
     { return new ZExpression(s, new ZConstant(modifier + s2, ZConstant.COLUMNNAME)); }
|  LOOKAHEAD(2) e = FunctionCall() { return e; }
/*
|  LOOKAHEAD(<S_IDENTIFIER> "(") e = FunctionCall() { return e; }
*/
|  s = TableColumn() { return new ZConstant(s, ZConstant.COLUMNNAME); }
|  t = <S_NUMBER> { return new ZConstant(t.toString(), ZConstant.NUMBER); }
|  t = <S_CHAR_LITERAL> {
     s = t.toString();
     if(s.startsWith("\'")) s = s.substring(1);
     if(s.endsWith("\'")) s = s.substring(0, s.length()-1);
     return new ZConstant(s, ZConstant.STRING); }
|  t = <S_BIND> { return new ZConstant(t.toString(), ZConstant.STRING); }
|  "(" e = SQLExpression() ")" { return e; }
}

// AggregateFunc ::= SUM | AVG | MAX | MIN | COUNT
// 01/07/00 PY.Gibello - Added COUNT
String AggregateFunc():
{
  Token t;
}
{
  t = "SUM" { return t.toString(); }
| t = "AVG" { return t.toString(); }
| t = "MAX" { return t.toString(); }
| t = "MIN" { return t.toString(); }
| t = "COUNT" { return t.toString(); }
}

ZExpression FunctionCall():
{
  Token t;
  String s;
  ZExpression e;
   Vector<ZExp> parm = null;
}
{
  (t = <S_IDENTIFIER> { s = t.toString(); } | s = AggregateFunc()) "("
  [ parm = SQLExpressionList() ] ")" {

    int nparm = ZUtils.isCustomFunction(s);
    if(nparm < 0) nparm = (ZUtils.isAggregate(s) ? 1 : -1);
    if(nparm < 0)
      throw new ParseException("Undefined function: " + s);
    if(nparm != ZUtils.VARIABLE_PLIST && nparm > 0) {
      if(parm == null || parm.size() != nparm)
        throw new ParseException("Function " + s + " should have "
         + nparm + " parameter(s)");
    }

    e = new ZExpression(s);
    e.setOperands(parm);
    return e;
  }
}
