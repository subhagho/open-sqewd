/* Generated By:JavaCC: Do not edit this line. DalSqlParser.java */
package com.sqewd.open.dal.core.persistence.query.parser;

import java.io.*;
import java.util.*;
import org.gibello.zql.*;

@SuppressWarnings(
{
  "unused","serial"
}
)
public class DalSqlParser implements DalSqlParserConstants {

  public static void main(String args[]) throws ParseException {

    DalSqlParser p = null ;

    if ( args.length < 1  ) {
      System.out.println("Reading from stdin (exit; to finish)");
      p = new DalSqlParser(System.in) ;

    } else {

      try {
        p = new DalSqlParser(new DataInputStream(
                          new FileInputStream(args[0]))) ;
      } catch (FileNotFoundException e) {
        System.out.println("File " + args[0] +
                           " not found. Reading from stdin") ;
        p = new DalSqlParser(System.in) ;
      }
    } // else ends here

    if ( args.length > 0 ) {
      System.out.println(args[0]) ;
    }

    ZQuery st = null;
    while((st = p.QueryClause()) != null) {
      System.out.println(st.toString());
    }

    System.out.println("Parse Successful") ;

  }

  final public void BasicDataTypeDeclaration() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_CHAR:
    case K_FLOAT:
    case K_INTEGER:
    case K_NATURAL:
    case K_NUMBER:
    case K_REAL:
    case K_VARCHAR2:
    case K_VARCHAR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_CHAR:
        jj_consume_token(K_CHAR);
        break;
      case K_VARCHAR:
        jj_consume_token(K_VARCHAR);
        break;
      case K_VARCHAR2:
        jj_consume_token(K_VARCHAR2);
        break;
      case K_INTEGER:
        jj_consume_token(K_INTEGER);
        break;
      case K_NUMBER:
        jj_consume_token(K_NUMBER);
        break;
      case K_NATURAL:
        jj_consume_token(K_NATURAL);
        break;
      case K_REAL:
        jj_consume_token(K_REAL);
        break;
      case K_FLOAT:
        jj_consume_token(K_FLOAT);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 89:
        jj_consume_token(89);
        jj_consume_token(S_NUMBER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_OR:
          jj_consume_token(K_OR);
          jj_consume_token(S_NUMBER);
          break;
        default:
          jj_la1[1] = jj_gen;
          ;
        }
        jj_consume_token(90);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      break;
    case K_DATE:
      jj_consume_token(K_DATE);
      break;
    case K_BINARY_INTEGER:
      jj_consume_token(K_BINARY_INTEGER);
      break;
    case K_BOOLEAN:
      jj_consume_token(K_BOOLEAN);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* ---------------- DECLARATIONS SECTION ends here ------------------ */

/* ---------------- Code Section starts here ---------------------- */
  final public ZQuery QueryClause() throws ParseException {
  ZQuery q;
  Vector<ZOrderBy> v;
    q = SelectWithoutOrder();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ORDER:
      v = OrderByClause();
                          q.addOrderBy(v);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    {if (true) return q;}
    throw new Error("Missing return statement in function");
  }

  final public ZQuery SelectWithoutOrder() throws ParseException {
  ZQuery q = new ZQuery();
  ZExp where = null;
  ZGroupBy groupby = null;
  ZExpression setclause = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_AVG:
    case K_COUNT:
    case K_MAX:
    case K_MIN:
    case K_NOT:
    case K_NULL:
    case K_PRIOR:
    case K_SUM:
    case S_NUMBER:
    case S_IDENTIFIER:
    case S_BIND:
    case S_CHAR_LITERAL:
    case S_QUOTED_IDENTIFIER:
    case 89:
    case 100:
    case 101:
      where = WhereClause();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    q.addWhere(where);

    {if (true) return q;}
    throw new Error("Missing return statement in function");
  }

  final public ZExp WhereClause() throws ParseException {
  ZExp e;
    e = SQLExpression();
                          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public ZExp SQLExpression() throws ParseException {
  ZExp e1, e2;
  ZExpression e = null;
  boolean single = true;
    e1 = SQLAndExpression();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_OR:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_1;
      }
      jj_consume_token(K_OR);
      e2 = SQLAndExpression();
      if(single) { e = new ZExpression("OR", e1); }
      single=false;
      e.addOperand(e2);
    }
      {if (true) return (single ? e1 : e);}
    throw new Error("Missing return statement in function");
  }

  final public String Relop() throws ParseException {
  Token op;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 91:
      op = jj_consume_token(91);
               {if (true) return op.toString();}
      break;
    case 92:
      op = jj_consume_token(92);
               {if (true) return op.toString();}
      break;
    case 93:
      op = jj_consume_token(93);
               {if (true) return op.toString();}
      break;
    case 94:
      op = jj_consume_token(94);
               {if (true) return op.toString();}
      break;
    case 95:
      op = jj_consume_token(95);
               {if (true) return op.toString();}
      break;
    case 96:
      op = jj_consume_token(96);
               {if (true) return op.toString();}
      break;
    case 97:
      op = jj_consume_token(97);
               {if (true) return op.toString();}
      break;
    case 98:
      op = jj_consume_token(98);
               {if (true) return op.toString();}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ZExp SQLAndExpression() throws ParseException {
  ZExp e1, e2;
  ZExpression e = null;
  boolean single = true;
    e1 = SQLUnaryLogicalExpression();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AND:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_2;
      }
      jj_consume_token(K_AND);
      e2 = SQLUnaryLogicalExpression();
      if(single) { e = new ZExpression("AND", e1); }
      single=false;
      e.addOperand(e2);
    }
      {if (true) return (single ? e1 : e);}
    throw new Error("Missing return statement in function");
  }

  final public ZExp SQLUnaryLogicalExpression() throws ParseException {
  ZExp e1, e;
  boolean not = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
              not = true;
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    e1 = SQLRelationalExpression();
       if(not) e = new ZExpression("NOT", e1);
       else e = e1;
       {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

// SQLRelationalExpression ::=
//    ( [PRIOR] SQLSimpleExpression | SQLExpressionList )
//    ( SQLRelationalOperatorExpression
//      | SQLInClause | SQLBetweenClause | SQLLikeClause | IsNullClause )?
  final public ZExp SQLRelationalExpression() throws ParseException {
  ZExp e1, eleft;
  ZExpression eright = null;
  Vector<ZExp> v;
  boolean prior = false;
    if (jj_2_1(2147483647)) {
      jj_consume_token(89);
      v = SQLExpressionList();
      jj_consume_token(90);
       eleft = new ZExpression(",");
       ((ZExpression)eleft).setOperands(v);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AVG:
      case K_COUNT:
      case K_MAX:
      case K_MIN:
      case K_NULL:
      case K_PRIOR:
      case K_SUM:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_BIND:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case 89:
      case 100:
      case 101:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_PRIOR:
          jj_consume_token(K_PRIOR);
                 prior = true;
          break;
        default:
          jj_la1[10] = jj_gen;
          ;
        }
        e1 = SQLSimpleExpression();
        if(prior) eleft = new ZExpression("PRIOR", e1);
        else eleft = e1;
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_BETWEEN:
    case K_IN:
    case K_IS:
    case K_LIKE:
    case K_NOT:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
        eright = SQLRelationalOperatorExpression();
        break;
      default:
        jj_la1[12] = jj_gen;
        if (jj_2_2(2)) {
          eright = SQLInClause();
        } else if (jj_2_3(2)) {
          eright = SQLBetweenClause();
        } else if (jj_2_4(2)) {
          eright = SQLLikeClause();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_IS:
            eright = IsNullClause();
            break;
          default:
            jj_la1[13] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
     if(eright == null) {if (true) return eleft;}
     Vector<ZExp> v2 = eright.getOperands();
     if(v2 == null) v2 = new Vector<ZExp>(); //For IS NULL, which is unary!
     v2.insertElementAt(eleft, 0);
     eright.setOperands(v2);
     {if (true) return eright;}
    throw new Error("Missing return statement in function");
  }

  final public Vector<ZExp> SQLExpressionList() throws ParseException {
  Vector<ZExp> v = new Vector<ZExp>(8);
  ZExp e;
    e = SQLSimpleExpressionOrPreparedCol();
                                             v.addElement(e);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_OR:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_3;
      }
      jj_consume_token(K_OR);
      e = SQLSimpleExpressionOrPreparedCol();
                                                  v.addElement(e);
    }
      {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public ZExpression SQLRelationalOperatorExpression() throws ParseException {
  ZExpression e;
  ZExp e1, eright;
  String op;
  String unaryOp = null;
    op = Relop();
                   e = new ZExpression(op);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_PRIOR:
      jj_consume_token(K_PRIOR);
                  unaryOp = "PRIOR";
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    e1 = SQLSimpleExpressionOrPreparedCol();
          if(unaryOp == null) eright = e1;
          else eright = new ZExpression(unaryOp, e1);
      e.addOperand(eright); {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public ZExp SQLSimpleExpressionOrPreparedCol() throws ParseException {
  ZExp e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_AVG:
    case K_COUNT:
    case K_MAX:
    case K_MIN:
    case K_NULL:
    case K_SUM:
    case S_NUMBER:
    case S_IDENTIFIER:
    case S_BIND:
    case S_CHAR_LITERAL:
    case S_QUOTED_IDENTIFIER:
    case 89:
    case 100:
    case 101:
      e = SQLSimpleExpression();
                               {if (true) return e;}
      break;
    case 99:
      e = PreparedCol();
                       {if (true) return e;}
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// For prepared columns ("?")
  final public ZExp PreparedCol() throws ParseException {
    jj_consume_token(99);
        {if (true) return new ZExpression("?");}
    throw new Error("Missing return statement in function");
  }

  final public ZExpression SQLInClause() throws ParseException {
  ZExpression e;
  boolean not = false;
  Vector<ZExp> v;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
           not = true;
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    jj_consume_token(K_IN);
         e = new ZExpression(not ? "NOT IN" : "IN");
    jj_consume_token(89);
    v = SQLExpressionList();
                                 e.setOperands(v);
    jj_consume_token(90);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public ZExpression SQLBetweenClause() throws ParseException {
  ZExpression e;
  ZExp  e1, e2;
  boolean not = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
           not = true;
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    jj_consume_token(K_BETWEEN);
    e1 = SQLSimpleExpressionOrPreparedCol();
    jj_consume_token(K_AND);
    e2 = SQLSimpleExpressionOrPreparedCol();
    if(not) e = new ZExpression("NOT BETWEEN", e1, e2);
    else e = new ZExpression("BETWEEN", e1, e2);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Vector<ZOrderBy> OrderByClause() throws ParseException {
  Vector<ZOrderBy> v = new Vector<ZOrderBy>();
  ZExp e;
  ZOrderBy ob;
    jj_consume_token(K_ORDER);
    e = SQLSimpleExpression();
                                       ob = new ZOrderBy(e);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ASC:
    case K_DESC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ASC:
        jj_consume_token(K_ASC);
        break;
      case K_DESC:
        jj_consume_token(K_DESC);
                      ob.setAscOrder(false);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
                                                  v.addElement(ob);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_OR:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_4;
      }
      jj_consume_token(K_OR);
      e = SQLSimpleExpression();
                                     ob = new ZOrderBy(e);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ASC:
      case K_DESC:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ASC:
          jj_consume_token(K_ASC);
          break;
        case K_DESC:
          jj_consume_token(K_DESC);
                       ob.setAscOrder(false);
          break;
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
                                                   v.addElement(ob);
    }
      {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public ZExpression SQLLikeClause() throws ParseException {
  ZExp eright;
  ZExpression e;
  boolean not = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
           not = true;
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    jj_consume_token(K_LIKE);
    eright = SQLSimpleExpressionOrPreparedCol();
    if(not) e = new ZExpression("NOT LIKE", eright);
    else e = new ZExpression("LIKE", eright);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public ZExpression IsNullClause() throws ParseException {
  boolean not = false;
    jj_consume_token(K_IS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
                not = true;
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    jj_consume_token(K_NULL);
    {if (true) return(not ? new ZExpression("IS NOT NULL") : new ZExpression("IS NULL"));}
    throw new Error("Missing return statement in function");
  }

// SQLSimpleExpression
//    ::= SQLMultiplicativeExpression (OP SQLMultiplicativeExpression)*
// OP ::= + | - | "||"
  final public ZExp SQLSimpleExpression() throws ParseException {
  Token op;
  ZExp e1, e2;
  ZExpression e = null;
    e1 = SQLMultiplicativeExpression();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 100:
      case 101:
      case 102:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 100:
        op = jj_consume_token(100);
        break;
      case 101:
        op = jj_consume_token(101);
        break;
      case 102:
        op = jj_consume_token(102);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e2 = SQLMultiplicativeExpression();
      e = new ZExpression(op.toString(), e1);
      e.addOperand(e2);
      e1 = e;
    }
      {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

// SQLMultiplicativeExpression
//    ::= SQLExpotentExpression (OP SQLExpotentExpression)*
// OP ::= * | /
  final public ZExp SQLMultiplicativeExpression() throws ParseException {
  Token op;
  ZExp e1, e2;
  ZExpression e = null;
    e1 = SQLExpotentExpression();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 103:
      case 104:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 103:
        op = jj_consume_token(103);
        break;
      case 104:
        op = jj_consume_token(104);
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e2 = SQLExpotentExpression();
      e = new ZExpression(op.toString(), e1);
      e.addOperand(e2);
      e1 = e;
    }
      {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

// SQLExpotentExpression ::= SQLUnaryExpression (** SQLUnaryExpression)*
  final public ZExp SQLExpotentExpression() throws ParseException {
  Token op;
  ZExp e1, e2;
  ZExpression e = null;
  boolean single = true;
    e1 = SQLUnaryExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 105:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_7;
      }
      op = jj_consume_token(105);
      e2 = SQLUnaryExpression();
      if(single) e = new ZExpression(op.toString(), e1);
      single = false;
      e.addOperand(e2);
    }
      {if (true) return (single ? e1 : e);}
    throw new Error("Missing return statement in function");
  }

// SQLUnaryExpression ::= [+|-] SQLPrimaryExpression
  final public ZExp SQLUnaryExpression() throws ParseException {
  Token op = null;
  ZExp e1, e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 100:
    case 101:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 100:
        op = jj_consume_token(100);
        break;
      case 101:
        op = jj_consume_token(101);
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    e1 = SQLPrimaryExpression();
    if(op == null) e = e1;
    else e = new ZExpression(op.toString(), e1);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public String OracleObjectName() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
      t = jj_consume_token(S_IDENTIFIER);
                         {if (true) return t.toString();}
      break;
    case S_QUOTED_IDENTIFIER:
      t = jj_consume_token(S_QUOTED_IDENTIFIER);
                                                                              {if (true) return t.toString();}
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String TableColumn() throws ParseException {
  StringBuffer buf = new StringBuffer();
  String s;
    // user.table.column
        s = OracleObjectName();
                             buf.append(s);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 106:
      jj_consume_token(106);
      s = OracleObjectName();
                                   buf.append("." + s);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        s = OracleObjectName();
                                   buf.append("." + s);
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
      {if (true) return buf.toString();}
    throw new Error("Missing return statement in function");
  }

// 01/07/00 PY.Gibello - Added COUNT(*) to SQLPrimaryExpression
// TBD should be ZConstant("COUNT(*)", ZConstant.STRING))
// instead of ZConstant("*", ZConstant.COLUMNNAME) ??
// 01/06/02 PY.Gibello - Added ALL | DISTINCT (then the column name
// starts with "all " or "distinct " when required, which may not be the
// fairest solution...)

// SQLPrimaryExpression ::= NULL | OuterJoinExpression
//   | AggregateFunc ( [ ALL | DISTINCT ] TableColumn ) | TableColumn
//   | COUNT(*)
//   | <NUMBER> | <STRING> | <BIND>
  final public ZExp SQLPrimaryExpression() throws ParseException {
  Token t;
  String s, s2, modifier="";
  ZExp e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NULL:
      jj_consume_token(K_NULL);
           {if (true) return new ZConstant("NULL", ZConstant.NULL);}
     {if (true) return new ZConstant(s, ZConstant.COLUMNNAME);}
     //return new ZExpression("_NOT_SUPPORTED"); //TBD

      break;
    default:
      jj_la1[38] = jj_gen;
      if (jj_2_5(3)) {
        jj_consume_token(K_COUNT);
        jj_consume_token(89);
        jj_consume_token(103);
        jj_consume_token(90);
     {if (true) return new ZExpression("COUNT",
      new ZConstant("*", ZConstant.COLUMNNAME));}
      } else if (jj_2_6(3)) {
        s = AggregateFunc();
        jj_consume_token(89);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ALL:
          jj_consume_token(K_ALL);
             modifier="all ";
          break;
        case K_DISTINCT:
          jj_consume_token(K_DISTINCT);
                                               modifier="distinct ";
          break;
        default:
          jj_la1[37] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        s2 = TableColumn();
        jj_consume_token(90);
       {if (true) return new ZExpression(s, new ZConstant(modifier + s2, ZConstant.COLUMNNAME));}
      } else if (jj_2_7(2)) {
        e = FunctionCall();
                                     {if (true) return e;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_IDENTIFIER:
        case S_QUOTED_IDENTIFIER:
          s = TableColumn();
                       {if (true) return new ZConstant(s, ZConstant.COLUMNNAME);}
          break;
        case S_NUMBER:
          t = jj_consume_token(S_NUMBER);
                    {if (true) return new ZConstant(t.toString(), ZConstant.NUMBER);}
          break;
        case S_CHAR_LITERAL:
          t = jj_consume_token(S_CHAR_LITERAL);
     s = t.toString();
     if(s.startsWith("\u005c'")) s = s.substring(1);
     if(s.endsWith("\u005c'")) s = s.substring(0, s.length()-1);
     {if (true) return new ZConstant(s, ZConstant.STRING);}
          break;
        case S_BIND:
          t = jj_consume_token(S_BIND);
                  {if (true) return new ZConstant(t.toString(), ZConstant.STRING);}
          break;
        case 89:
          jj_consume_token(89);
          e = SQLExpression();
          jj_consume_token(90);
                                 {if (true) return e;}
          break;
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

// AggregateFunc ::= SUM | AVG | MAX | MIN | COUNT
// 01/07/00 PY.Gibello - Added COUNT
  final public String AggregateFunc() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_SUM:
      t = jj_consume_token(K_SUM);
              {if (true) return t.toString();}
      break;
    case K_AVG:
      t = jj_consume_token(K_AVG);
              {if (true) return t.toString();}
      break;
    case K_MAX:
      t = jj_consume_token(K_MAX);
              {if (true) return t.toString();}
      break;
    case K_MIN:
      t = jj_consume_token(K_MIN);
              {if (true) return t.toString();}
      break;
    case K_COUNT:
      t = jj_consume_token(K_COUNT);
                {if (true) return t.toString();}
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ZExpression FunctionCall() throws ParseException {
  Token t;
  String s;
  ZExpression e;
   Vector<ZExp> parm = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
      t = jj_consume_token(S_IDENTIFIER);
                        s = t.toString();
      break;
    case K_AVG:
    case K_COUNT:
    case K_MAX:
    case K_MIN:
    case K_SUM:
      s = AggregateFunc();
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(89);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_AVG:
    case K_COUNT:
    case K_MAX:
    case K_MIN:
    case K_NULL:
    case K_SUM:
    case S_NUMBER:
    case S_IDENTIFIER:
    case S_BIND:
    case S_CHAR_LITERAL:
    case S_QUOTED_IDENTIFIER:
    case 89:
    case 99:
    case 100:
    case 101:
      parm = SQLExpressionList();
      break;
    default:
      jj_la1[42] = jj_gen;
      ;
    }
    jj_consume_token(90);
    int nparm = ZUtils.isCustomFunction(s);
    if(nparm < 0) nparm = (ZUtils.isAggregate(s) ? 1 : -1);
    if(nparm < 0)
      {if (true) throw new ParseException("Undefined function: " + s);}
    if(nparm != ZUtils.VARIABLE_PLIST && nparm > 0) {
      if(parm == null || parm.size() != nparm)
        {if (true) throw new ParseException("Function " + s + " should have "
         + nparm + " parameter(s)");}
    }

    e = new ZExpression(s);
    e.setOperands(parm);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_3R_44() {
    if (jj_3R_46()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(K_OR)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_3R_20()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_57()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(100)) {
    jj_scanpos = xsp;
    if (jj_scan_token(101)) return true;
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(89)) return true;
    if (jj_3R_8()) return true;
    if (jj_scan_token(K_OR)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(K_PRIOR)) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(105)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) jj_scanpos = xsp;
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_33()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_34()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(89)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(90)) return true;
    return false;
  }

  private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_62()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) return true;
    }
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_3R_29()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_30()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(100)) {
    jj_scanpos = xsp;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) return true;
    }
    }
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_3R_16()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_17()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_55()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_56()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(98)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(K_IS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) jj_scanpos = xsp;
    if (jj_scan_token(K_NULL)) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(97)) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(96)) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(95)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(94)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(93)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(92)) return true;
    return false;
  }

  private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(91)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) jj_scanpos = xsp;
    if (jj_scan_token(K_LIKE)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(K_OR)) return true;
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_3R_49()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_50()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    if (jj_scan_token(89)) return true;
    xsp = jj_scanpos;
    if (jj_3R_48()) jj_scanpos = xsp;
    if (jj_scan_token(90)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(K_DISTINCT)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(K_COUNT)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(K_MIN)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(K_MAX)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(K_AVG)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(K_SUM)) return true;
    return false;
  }

  private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) jj_scanpos = xsp;
    if (jj_scan_token(K_BETWEEN)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(89)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(90)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(S_BIND)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) jj_scanpos = xsp;
    if (jj_scan_token(K_IN)) return true;
    if (jj_scan_token(89)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(90)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(S_CHAR_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(S_NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(S_QUOTED_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(K_ALL)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(99)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_12()) return true;
    if (jj_scan_token(89)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    }
    if (jj_3R_44()) return true;
    if (jj_scan_token(90)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(K_COUNT)) return true;
    if (jj_scan_token(89)) return true;
    if (jj_scan_token(103)) return true;
    if (jj_scan_token(90)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    return false;
  }

  private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(K_NULL)) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(K_PRIOR)) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(106)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(106)) return true;
    if (jj_3R_46()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) jj_scanpos = xsp;
    return false;
  }

  /** Generated Token Manager. */
  public DalSqlParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[43];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8008000,0x0,0x0,0x810b000,0x0,0x80400,0x0,0x0,0x40,0x0,0x0,0x80400,0x0,0x0,0x800,0x0,0x0,0x80400,0x0,0x0,0x400200,0x400200,0x0,0x400200,0x400200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800020,0x0,0x0,0x80400,0x80400,0x80400,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1011004,0x80000,0x0,0x1011004,0x100000,0x20a300,0x80000,0x0,0x0,0x2000,0x200000,0x208300,0x0,0x20,0x2061,0x80000,0x200000,0x8300,0x2000,0x2000,0x0,0x0,0x80000,0x0,0x0,0x2000,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x300,0x300,0x8300,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0xc0,0x0,0x2000000,0xc0,0x0,0x3c81001,0x0,0xf8000000,0x0,0x0,0x0,0x3c81001,0xf8000000,0x0,0xf8000000,0x0,0x0,0x3c81001,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1080000,0x0,0x0,0x0,0x0,0x3c81000,0x1,0x80001,0x3c81001,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x30,0x0,0x7,0x0,0x0,0x0,0x30,0x7,0x0,0x7,0x0,0x0,0x38,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x70,0x70,0x180,0x180,0x200,0x30,0x30,0x0,0x400,0x400,0x0,0x0,0x0,0x0,0x0,0x38,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[7];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public DalSqlParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public DalSqlParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DalSqlParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public DalSqlParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DalSqlParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public DalSqlParser(DalSqlParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(DalSqlParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[107];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 43; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 107; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 7; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

    // main ends here

}
