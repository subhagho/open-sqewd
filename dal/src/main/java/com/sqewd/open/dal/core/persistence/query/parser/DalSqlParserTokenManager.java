/* Generated By:JavaCC: Do not edit this line. DalSqlParserTokenManager.java */
package com.sqewd.open.dal.core.persistence.query.parser;
import java.io.*;
import java.util.*;
import org.gibello.zql.*;

/** Token Manager. */
public class DalSqlParserTokenManager implements DalSqlParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x200000000000L) != 0L)
            return 55;
         if ((active1 & 0x10000000000L) != 0L)
            return 0;
         if ((active0 & 0xffefffffffffffa0L) != 0L || (active1 & 0x3fffL) != 0L)
         {
            jjmatchedKind = 85;
            return 56;
         }
         if ((active1 & 0x80000000000L) != 0L)
            return 3;
         return -1;
      case 1:
         if ((active0 & 0x64007e00008600L) != 0L)
            return 56;
         if ((active0 & 0xff8bff81ffff79a0L) != 0L || (active1 & 0x3fffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 85;
               jjmatchedPos = 1;
            }
            return 56;
         }
         return -1;
      case 2:
         if ((active0 & 0xafcbb1bddfff7000L) != 0L || (active1 & 0x3ffbL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 85;
               jjmatchedPos = 2;
            }
            return 56;
         }
         if ((active0 & 0x50004e0020000da0L) != 0L || (active1 & 0x4L) != 0L)
            return 56;
         return -1;
      case 3:
         if ((active0 & 0x70911a048a10000L) != 0L || (active1 & 0x1800L) != 0L)
            return 56;
         if ((active0 & 0xa8c2a81d975e7000L) != 0L || (active1 & 0x27fbL) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 3;
            return 56;
         }
         return -1;
      case 4:
         if ((active0 & 0x2802a01d074e7000L) != 0L || (active1 & 0x3d1L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 4;
            return 56;
         }
         if ((active0 & 0x80c0080090100000L) != 0L || (active1 & 0x242aL) != 0L)
            return 56;
         return -1;
      case 5:
         if ((active0 & 0x2002800504440000L) != 0L || (active1 & 0xc0L) != 0L)
            return 56;
         if ((active0 & 0x8002018030a7000L) != 0L || (active1 & 0x311L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 5;
            return 56;
         }
         return -1;
      case 6:
         if ((active0 & 0x800001003000000L) != 0L || (active1 & 0x11L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 85;
               jjmatchedPos = 6;
            }
            return 56;
         }
         if ((active0 & 0x2008000a5000L) != 0L || (active1 & 0x300L) != 0L)
            return 56;
         if ((active0 & 0x2000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 85;
               jjmatchedPos = 6;
            }
            return 57;
         }
         return -1;
      case 7:
         if ((active0 & 0x1002000000L) != 0L || (active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 7;
            return 56;
         }
         if ((active0 & 0x800000001000000L) != 0L || (active1 & 0x1L) != 0L)
            return 56;
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 7;
            return 57;
         }
         if ((active1 & 0x100L) != 0L)
            return 57;
         return -1;
      case 8:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 8;
            return 56;
         }
         if ((active0 & 0x1002000000L) != 0L)
            return 56;
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 8;
            return 57;
         }
         return -1;
      case 9:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 9;
            return 56;
         }
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 9;
            return 57;
         }
         return -1;
      case 10:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 10;
            return 57;
         }
         if ((active1 & 0x10L) != 0L)
            return 56;
         return -1;
      case 11:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 11;
            return 57;
         }
         return -1;
      case 12:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 12;
            return 57;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000L);
      case 35:
         return jjStopAtPos(0, 96);
      case 40:
         return jjStopAtPos(0, 91);
      case 41:
         return jjStopAtPos(0, 93);
      case 42:
         jjmatchedKind = 106;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000L);
      case 43:
         return jjStopAtPos(0, 103);
      case 44:
         return jjStopAtPos(0, 92);
      case 45:
         return jjStartNfaWithStates_0(0, 104, 0);
      case 46:
         return jjStartNfaWithStates_0(0, 109, 55);
      case 47:
         return jjStartNfaWithStates_0(0, 107, 3);
      case 59:
         return jjStopAtPos(0, 6);
      case 60:
         jjmatchedKind = 100;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2200000000L);
      case 61:
         return jjStopAtPos(0, 94);
      case 62:
         jjmatchedKind = 98;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000L);
      case 63:
         return jjStopAtPos(0, 102);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0xfa0L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0xf000L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1f0000L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1e00000L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0xe000000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x70000000L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x7e00000000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x18000000000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x1e0000000000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x3e00000000000L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x6c000000000000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x1e00000000000000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0xe000000000000000L, 0x7L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x18L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x60L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x380L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3c00L);
      case 124:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000000L);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 108);
         break;
      case 61:
         if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 95);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 99);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 101);
         break;
      case 62:
         if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 97);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x220100200000L, active1, 0x388L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x6600000000c01000L, active1, 0L);
      case 70:
      case 102:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 50, 56);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000010000L, active1, 0x400L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0xc8001002000L, active1, 0x800L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000020L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1L);
      case 78:
      case 110:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8003c00000180L, active1, 0x20L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x1800d100201e4000L, active1, 0x1000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40L);
      case 82:
      case 114:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000c0000000L, active1, 0x2010L);
      case 83:
      case 115:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 38, 56);
         return jjMoveStringLiteralDfa2_0(active0, 0x400L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x103000000000000L, active1, 0x4L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L, active1, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0xe000000L, active1, 0L);
      case 89:
      case 121:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(1, 15, 56);
         break;
      case 124:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 105);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x8600000000010000L, active1, 0x13L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8L);
      case 67:
      case 99:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 56);
         return jjMoveStringLiteralDfa3_0(active0, 0x10002000000L, active1, 0L);
      case 68:
      case 100:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 7, 56);
         return jjMoveStringLiteralDfa3_0(active0, 0x40100000000000L, active1, 0x40L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400L);
      case 71:
      case 103:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 11, 56);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x18000000c000000L, active1, 0x2020L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0L);
      case 76:
      case 108:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(2, 5, 56);
         return jjMoveStringLiteralDfa3_0(active0, 0x2809000000400000L, active1, 0x80L);
      case 77:
      case 109:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 66, 56);
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000060000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x80000082000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0xd0004000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 29, 56);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1300L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x401800000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 46, 56);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 62, 56);
         return jjMoveStringLiteralDfa3_0(active0, 0x203800201000L, active1, 0x800L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L, active1, 0L);
      case 87:
      case 119:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 60, 56);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L, active1, 0L);
      case 88:
      case 120:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 41, 56);
         break;
      case 89:
      case 121:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 56);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x800010002000L, active1, 0x40L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L, active1, 0L);
      case 67:
      case 99:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x300L);
      case 68:
      case 100:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 57, 56);
         break;
      case 69:
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 56);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 56);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0x2040001c00400000L, active1, 0L);
      case 72:
      case 104:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 75, 56);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L, active1, 0L);
      case 75:
      case 107:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 56);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 76, 56);
         break;
      case 76:
      case 108:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 56);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000002004000L, active1, 0x9L);
      case 77:
      case 109:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0x60000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x180000L, active1, 0x10L);
      case 79:
      case 111:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 37, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0x20L);
      case 82:
      case 114:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0x402L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 56);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 56, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L, active1, 0x2000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x280080000000L, active1, 0x80L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L, active1, 0L);
      case 89:
      case 121:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 51, 56);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 63, 56);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 67, 56);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 74, 56);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 77, 56);
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000a5000L, active1, 0x80L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L, active1, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x300L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x800001040000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1L);
      case 78:
      case 110:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 69, 56);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L, active1, 0L);
      case 80:
      case 112:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 31, 56);
         break;
      case 82:
      case 114:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 54, 56);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 55, 56);
         return jjMoveStringLiteralDfa5_0(active0, 0x201400002000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 43, 56);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10L);
      case 84:
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 56);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 56);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 65, 56);
         return jjMoveStringLiteralDfa5_0(active0, 0x4400000L, active1, 0x40L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x800200000004000L, active1, 0x310L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 56);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 70, 56);
         return jjMoveStringLiteralDfa6_0(active0, 0x800001000L, active1, 0L);
      case 71:
      case 103:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 32, 56);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x1020000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 49, 56);
         break;
      case 83:
      case 115:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 56);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 71, 56);
         return jjMoveStringLiteralDfa6_0(active0, 0x1002000000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 56);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 34, 56);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 47, 56);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 61, 56);
         break;
      case 89:
      case 121:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000001000000L, active1, 0x10L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L, active1, 0L);
      case 76:
      case 108:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 45, 56);
         break;
      case 78:
      case 110:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 12, 56);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 14, 56);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1L);
      case 82:
      case 114:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 35, 56);
         else if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100L);
      case 84:
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 17, 56);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 56);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 50:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 72, 57);
         break;
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000L, active1, 0L);
      case 75:
      case 107:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 59, 56);
         break;
      case 84:
      case 116:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(7, 24, 56);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(7, 64, 56);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(8, 25, 56);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 36, 56);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000L, active1, 0L);
      case 78:
      case 110:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(10, 68, 56);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 71:
      case 103:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 82:
      case 114:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(13, 13, 57);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 55;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAddStates(0, 6);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(35, 45);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(32, 33);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(27, 28);
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 56:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                     jjCheckNAddTwoStates(11, 12);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 57:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                     jjCheckNAddTwoStates(11, 12);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAdd(45);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAddTwoStates(35, 36);
                  }
                  break;
               case 0:
                  if (curChar != 45)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 4:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 5:
                  if (curChar == 42)
                     jjCheckNAddStates(7, 9);
                  break;
               case 6:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(7, 5);
                  break;
               case 7:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(7, 5);
                  break;
               case 8:
                  if (curChar == 47 && kind > 83)
                     kind = 83;
                  break;
               case 9:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 11:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddTwoStates(11, 12);
                  break;
               case 12:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 14:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddTwoStates(12, 14);
                  break;
               case 15:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 17:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAddTwoStates(17, 18);
                  break;
               case 18:
                  if (curChar == 46)
                     jjAddStates(10, 11);
                  break;
               case 20:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAddTwoStates(20, 18);
                  break;
               case 22:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAddTwoStates(22, 23);
                  break;
               case 23:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 25:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAddTwoStates(23, 25);
                  break;
               case 26:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 27:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 28:
                  if (curChar != 39)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(30, 28);
                  break;
               case 30:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(30, 28);
                  break;
               case 31:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 32:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 33:
                  if (curChar == 34 && kind > 90)
                     kind = 90;
                  break;
               case 34:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(35, 45);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAddTwoStates(35, 36);
                  break;
               case 37:
                  if ((0x280000000000L & l) != 0L)
                     jjAddStates(12, 13);
                  break;
               case 38:
                  if (curChar == 46)
                     jjCheckNAdd(39);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(39);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAddStates(14, 16);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(41);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAddTwoStates(42, 43);
                  break;
               case 43:
                  if (curChar == 46)
                     jjCheckNAdd(44);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(44);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(45);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAddStates(0, 6);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAddTwoStates(47, 36);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAddStates(17, 19);
                  break;
               case 49:
                  if (curChar == 46)
                     jjCheckNAdd(50);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAddTwoStates(50, 36);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAddTwoStates(51, 52);
                  break;
               case 52:
                  if (curChar == 46)
                     jjCheckNAdd(53);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(53);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(54);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 10:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddStates(20, 22);
                  break;
               case 56:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                     jjCheckNAddTwoStates(11, 12);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                     jjCheckNAddStates(20, 22);
                  }
                  break;
               case 57:
               case 11:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddTwoStates(11, 12);
                  break;
               case 1:
                  if (kind > 82)
                     kind = 82;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  jjCheckNAddTwoStates(4, 5);
                  break;
               case 6:
               case 7:
                  jjCheckNAddTwoStates(7, 5);
                  break;
               case 13:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddStates(23, 25);
                  break;
               case 14:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddTwoStates(12, 14);
                  break;
               case 16:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAddStates(26, 28);
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAddTwoStates(17, 18);
                  break;
               case 19:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAddStates(29, 31);
                  break;
               case 20:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAddTwoStates(20, 18);
                  break;
               case 21:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAddStates(32, 34);
                  break;
               case 22:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAddTwoStates(22, 23);
                  break;
               case 24:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAddStates(35, 37);
                  break;
               case 25:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAddTwoStates(23, 25);
                  break;
               case 27:
                  jjCheckNAddTwoStates(27, 28);
                  break;
               case 30:
                  jjCheckNAddTwoStates(30, 28);
                  break;
               case 32:
                  jjAddStates(38, 39);
                  break;
               case 36:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(40, 42);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 6:
               case 7:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(7, 5);
                  break;
               case 27:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 30:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(30, 28);
                  break;
               case 32:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(38, 39);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 55 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   47, 48, 49, 36, 51, 52, 54, 5, 6, 8, 19, 21, 38, 40, 41, 42, 
   43, 48, 49, 36, 10, 11, 12, 12, 13, 14, 16, 17, 18, 19, 20, 18, 
   21, 22, 23, 23, 24, 25, 32, 33, 37, 38, 40, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\73", null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, "\174", null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, "\50", "\54", "\51", "\75", 
"\41\75", "\43", "\74\76", "\76", "\76\75", "\74", "\74\75", "\77", "\53", "\55", 
"\174\174", "\52", "\57", "\52\52", "\56", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0x3fffff207fffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0xc0000L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0xc0000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[55];
private final int[] jjstateSet = new int[110];
protected char curChar;
/** Constructor. */
public DalSqlParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public DalSqlParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 55; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
